{"version":3,"sources":["services/notes.js","components/Note.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","length","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"uLACMA,EAAU,uDAiBD,EAfA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,OCF9BK,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,gBAEtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,QCMjCK,EAZM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAgB,OAAZA,EACO,KAIP,qBAAKJ,UAAU,QAAf,SACKI,KCHPC,G,MAAS,WAOX,OACI,sBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACI,uBACA,4GA+FGC,EA1FH,WACR,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,MAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACNC,IAEKjC,MAAK,SAAAkC,GACFT,EAASS,QAElB,IAEH,IA0CMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAA5B,GAAI,OAAuB,IAAnBA,EAAKG,aAEhC,OACI,gCACI,uCACA,cAAC,EAAD,CAAcK,QAASc,IACvB,8BACI,yBAAQhB,QAAS,kBAAMe,GAAYD,IAAnC,kBACUA,EAAU,YAAc,WAGtC,6BACKO,EAAYE,KAAI,SAAA7B,GAAI,OACjB,cAAC,EAAD,CAEIA,KAAMA,EACNC,iBAAkB,kBAtCX,SAACJ,GACxB,IAAMG,EAAOgB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAElC,KAAOA,KAChCmC,EAAW,2BAAQhC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EACY5B,EAAImC,GACXxC,MAAK,SAAAyC,GACFhB,EAASD,EAAMa,KAAI,SAAA7B,GAAI,OAAIA,EAAKH,KAAOA,EAAKG,EAAOiC,SAEtDC,OAAM,SAAAC,GACHZ,EAAgB,QAAD,OACHvB,EAAKK,QADF,yCAGf+B,YAAW,WACPb,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAElC,KAAOA,SAsBJwC,CAAmBrC,EAAKH,MAF3CG,EAAKH,SAMtB,uBAAMyC,SAhEE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfpC,QAASa,EACTwB,MAAM,IAAIC,MAAOC,cACjBzC,UAAW0C,KAAKC,SAAW,GAC3BjD,GAAImB,EAAM+B,OAAS,GAGvBtB,EACYgB,GACPjD,MAAK,SAAAyC,GACFhB,EAASD,EAAMgC,OAAOf,IACtBd,EAAW,QAmDf,UACI,uBACI8B,MAAO/B,EACPgC,SAlDS,SAACX,GACtBY,QAAQC,IAAIb,EAAMc,OAAOJ,OACzB9B,EAAWoB,EAAMc,OAAOJ,UAkDhB,wBAAQK,KAAK,SAAb,qBAEJ,cAAC,EAAD,QCvGZC,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6649e427.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'https://notes-backend-part3a.herokuapp.com/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make imporant'\n\n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport './index.css'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br />\n            <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n        </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n    }, [])\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5,\n            id: notes.length + 1,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `Note ${note.content} was already removed from the server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important === true)\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map(note =>\n                    <Note\n                        key={note.id}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n                )}\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type=\"submit\">save</button>\n            </form>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}